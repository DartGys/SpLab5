
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEnonassocUMINUSleftEXPONENTDIVIDE EQUALS EXPONENT IDENTIFIER LPAREN MINUS NUMBER PLUS RPAREN SQRT TIMES\n    statement : assignment\n              | expression\n    assignment : IDENTIFIER EQUALS expressionexpression : SQRT LPAREN expression RPARENexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expressionexpression : MINUS expression %prec UMINUSexpression : LPAREN expression RPARENexpression : NUMBERexpression : expression EXPONENT expressionexpression : IDENTIFIER'
    
_lr_action_items = {'IDENTIFIER':([0,6,7,9,10,11,12,13,14,15,],[4,17,17,17,17,17,17,17,17,17,]),'SQRT':([0,6,7,9,10,11,12,13,14,15,],[5,5,5,5,5,5,5,5,5,5,]),'MINUS':([0,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,],[7,10,-13,7,7,-11,7,7,7,7,7,7,7,10,-13,-9,-5,-6,-7,-8,-12,10,10,-10,-4,]),'LPAREN':([0,5,6,7,9,10,11,12,13,14,15,],[6,15,6,6,6,6,6,6,6,6,6,]),'NUMBER':([0,6,7,9,10,11,12,13,14,15,],[8,8,8,8,8,8,8,8,8,8,]),'$end':([1,2,3,4,8,17,18,19,20,21,22,23,24,26,27,],[0,-1,-2,-13,-11,-13,-9,-5,-6,-7,-8,-12,-3,-10,-4,]),'PLUS':([3,4,8,16,17,18,19,20,21,22,23,24,25,26,27,],[9,-13,-11,9,-13,-9,-5,-6,-7,-8,-12,9,9,-10,-4,]),'TIMES':([3,4,8,16,17,18,19,20,21,22,23,24,25,26,27,],[11,-13,-11,11,-13,-9,11,11,-7,-8,-12,11,11,-10,-4,]),'DIVIDE':([3,4,8,16,17,18,19,20,21,22,23,24,25,26,27,],[12,-13,-11,12,-13,-9,12,12,-7,-8,-12,12,12,-10,-4,]),'EXPONENT':([3,4,8,16,17,18,19,20,21,22,23,24,25,26,27,],[13,-13,-11,13,-13,13,13,13,13,13,-12,13,13,-10,-4,]),'EQUALS':([4,],[14,]),'RPAREN':([8,16,17,18,19,20,21,22,23,25,26,27,],[-11,26,-13,-9,-5,-6,-7,-8,-12,27,-10,-4,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'assignment':([0,],[2,]),'expression':([0,6,7,9,10,11,12,13,14,15,],[3,16,18,19,20,21,22,23,24,25,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> assignment','statement',1,'p_statement','yacc_grammar.py',20),
  ('statement -> expression','statement',1,'p_statement','yacc_grammar.py',21),
  ('assignment -> IDENTIFIER EQUALS expression','assignment',3,'p_assignment','yacc_grammar.py',27),
  ('expression -> SQRT LPAREN expression RPAREN','expression',4,'p_expression_sqrt','yacc_grammar.py',32),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','yacc_grammar.py',39),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','yacc_grammar.py',40),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','yacc_grammar.py',41),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','yacc_grammar.py',42),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','yacc_grammar.py',54),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','yacc_grammar.py',59),
  ('expression -> NUMBER','expression',1,'p_expression_number','yacc_grammar.py',64),
  ('expression -> expression EXPONENT expression','expression',3,'p_expression_exponent','yacc_grammar.py',69),
  ('expression -> IDENTIFIER','expression',1,'p_expression_var','yacc_grammar.py',83),
]
